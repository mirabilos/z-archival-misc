/*********************************************************************************
 *  Ewe Virtual Machine - Version 1.14, January 24, 2002                         *
 *  Copyright (C) 1999-2002 Michael L Brereton <michael_brereton@ewesoft.com>    *
 *  All Rights Reserved                                                          *
 *                                                                               *
 *  This library and virtual machine is free software; you can redistribute      *
 *  it and/or modify it under the terms of the Amended GNU Lesser General        *
 *  Public License distributed with this software.                               *
 *                                                                               *
 *  Under this license, linking this library or part thereof with other files to *
 *  produce an executable does not in itself require the executable to be        *
 *  covered by the GNU Lesser General Public License.                            *
 *                                                                               *
 *  This library and virtual machine is distributed in the hope that it will     *
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         *
 *                                                                               *
 *  You should have received a copy of the License along with this software;     *
 *  if not, please download it at: www.ewesoft.com/LGPL.txt                      *
 *                                                                               *
 *********************************************************************************/
package ewe.ui;
import ewe.fx.*;
import ewe.util.*;

/**
* A CheckBoxGroup object is used to group together a set of mutually exclusive
* mCheckBox objects. In other words, it will turn a set of mCheckBoxes into
* radio buttons. Furthermore, any ControlEvent.PRESSED events which are generated
* by the checkboxes in the group will have its target changed so that it appears
* as if these events are originating from the CheckBoxGroup object (if takeTarget is true).
*/
//##################################################################
public class CheckBoxGroup extends Vector implements EventListener,Textable,Intable{
//##################################################################

public boolean exclusive = true;
/**
* If takeTarget is true then ControlEvent.PRESSED events generated by the individual
* boxes will have its target changed so that it appears to be coming from this group.
**/
public boolean takeTarget = true;
/**
* Returns the index of the mCheckBox currently selected.
*/
//==================================================================
public int getSelectedIndex()
//==================================================================
{
	for (int i = 0; i<size(); i++){
		mCheckBox cb = (mCheckBox)get(i);
		if (cb.state) return i;
	}
	return -1;
}
/**
* Returns the mCheckBox currently selected.
*/
//==================================================================
public mCheckBox getSelected()
//==================================================================
{
	int i = getSelectedIndex();
	if (i == -1) return null;
	return (mCheckBox)get(i);
}
/**
* Select the mCheckBox at the given index.
*/
//==================================================================
public void selectIndex(int index)
//==================================================================
{
	mCheckBox cb = (mCheckBox)get(index);
	if (cb != null) cb.setState(true);
}
//==================================================================
public void onEvent(Event ev)
//==================================================================
{
	if (ev.type == ControlEvent.PRESSED && (find(ev.target) != -1) && takeTarget) {
		ev.target = this;
		//System.out.println("Changing!");
	}
}


/**
 * This calls selectIndex() with the provided value.
 */
//===================================================================
public void setInt(int value) {selectIndex(value);}
//===================================================================
/**
* This returns the same value as getSelectedIndex().
**/
//===================================================================
public int getInt() {return getSelectedIndex();}
//===================================================================
/**
* This will turn on the checkbox in this group with a label the same
* as the provided String value.
**/
//===================================================================
public void setText(String value)
//===================================================================
{
	for (int i = 0; i<size(); i++){
		mCheckBox cb = (mCheckBox)get(i);
		if (mString.compare(value,cb.getText(),true) == 0) {
			cb.setState(true);
			return;
		}
	}
}
/**
* Return the label of the selected checkbox, or an empty String if none
* is selected.
**/
//===================================================================
public String getText()
//===================================================================
{
	mCheckBox cb = getSelected();
	if (cb == null) return "";
	return cb.getText();
}
/**
* This creates a set of new mCheckBox controls, each one of which is assigned a label
* as specified in the choices parameter. The mCheckBox controls are then added to
* the destination panel in the specified number of columns.
* @param choices a list of lables for each checkbox.
* @param destination a destination panel to add to.
* @param columns the number of columns to add.
*/
//===================================================================
public void makePanel(String[] choices,CellPanel destination,int columns)
//===================================================================
{
	destination.equalWidths = true;
	int col = 0;
	for (int i = 0; i<choices.length; i++) {
		mCheckBox cb = new mCheckBox(choices[i]);
		destination.addNext(cb);
		cb.setGroup(this);
		col++;
		if (col >= columns) {
			destination.endRow();
			col = 0;
		}
	}
}

/**
 * @deprecated - do not use this, use mCheckBox.setGroup() to add an mCheckBox.
 */
public CheckBoxGroup addCheck(mCheckBox what)
{
	add(what);
	return this;
}

//##################################################################
}
//##################################################################

