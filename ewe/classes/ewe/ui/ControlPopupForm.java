/*********************************************************************************
 *  Ewe Virtual Machine - Version 1.14, January 24, 2002                         *
 *  Copyright (C) 1999-2002 Michael L Brereton <michael_brereton@ewesoft.com>    *
 *  All Rights Reserved                                                          *
 *                                                                               *
 *  This library and virtual machine is free software; you can redistribute      *
 *  it and/or modify it under the terms of the Amended GNU Lesser General        *
 *  Public License distributed with this software.                               *
 *                                                                               *
 *  Under this license, linking this library or part thereof with other files to *
 *  produce an executable does not in itself require the executable to be        *
 *  covered by the GNU Lesser General Public License.                            *
 *                                                                               *
 *  This library and virtual machine is distributed in the hope that it will     *
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         *
 *                                                                               *
 *  You should have received a copy of the License along with this software;     *
 *  if not, please download it at: www.ewesoft.com/LGPL.txt                      *
 *                                                                               *
 *********************************************************************************/
package ewe.ui;
import ewe.fx.*;
import ewe.util.*;

/**
* This class is used to implement a special, perhaps complex, Control which is popped up
* when another control is activated. For example, the DataDisplayInput control pops up a
* DateChooserPopup Form.<p>
*
* Generally you would call "attachTo()" to associate a ControlPopupForm with a Control.
* By default, the onEvent() method of the ControlPopupForm will listen for a ControlEvent.PRESSED
* event generated by the attached Control and then display itself when it is detected.<p>
*
* Note that a single ControlPopupForm can be attached to more than one Control. If any of the
* Controls is pressed, the Form will call setFor(Control who) for that particular control
* and then display itself.<p>
*
* A ControlPopupForm displays itself in a borderless Frame and modifies itself to be Flat.
* You will need to inherit from ControlPopupForm and add the necessary controls for whatever
* type of input you wish.<p>
*
* To close the Form simply call exit(IDOK) or exit(IDCANCEL) whenever data entry is complete.
* You should also then transfer (if necessary) data to the control to which the form was
* popped up for.<p>
**/
//##################################################################
public abstract class ControlPopupForm extends Form implements PopupController{
//##################################################################
{
	resizeOnSIP = true;
}
/**
* This tells the Form to place itself as close by the client as possible. It is true by default.
**/
public boolean putByClient = true;
/**
* Normally, pressing outside the popup Form has no effect, but if this is true, then if you press
* the original client Control, then the popup Form will close with exit code IDCANCEL. This
* is true by default.
**/
public boolean closeIfPressClient = true;

//===================================================================
public ControlPopupForm()
//===================================================================
{
	if (Gui.isSmartPhone) Gui.setOKCancel(this);
}
/**
* This is the client that popped up this control.
**/
//===================================================================
public Control client;
//===================================================================
{
	//hasTopBar = false;//title = "Input";
	keepFrame = true;
	modify(DrawFlat,0);
}
/**
* Attach the popup form to the specified Control.
**/
//==================================================================
public void attachTo(Control who)
//==================================================================
{
	if (who == null) return;
	who.addListener(this);
	attachedTo.add(who);
}
/**
* Detach the popup form from the specified Control.
**/
//===================================================================
public void detachFrom(Control who)
//===================================================================
{
	if (who == null) return;
	who.removeListener(this);
	attachedTo.remove(who);
}
//-------------------------------------------------------------------
//protected Vector attachedTo = new Vector();
protected ewe.util.WeakSet attachedTo = new ewe.util.WeakSet();
//-------------------------------------------------------------------

//-------------------------------------------------------------------
protected void pressedOutside(Point whereOnScreen)
//-------------------------------------------------------------------
{
	if (closeIfPressClient && (client != null))
		if (Gui.getAppRect(client).isInside(whereOnScreen.x,whereOnScreen.y))
			exit(IDCANCEL);
}
/**
* This listens for ControlEvent.PRESSED events from attached controls
* and calls setFor(Control who) if it detects that event. This will
* prompt the Form to display itself and take input.
**/
//==================================================================
public void onControlEvent(ControlEvent ev)
//==================================================================
{
	if (ev.type == ev.PRESSED && attachedTo.contains(ev.target)) {
		client = (Control)ev.target;
		if (client.menuIsActive()) return;
		setFor(client);
	}else if (ev.type == FrameEvent.PRESSED_OUTSIDE){
		pressedOutside((Point)((FrameEvent)ev).data);
	}
	super.onControlEvent(ev);
}
/**
* This is called by setFor(Control who) and gives you an opportunity to
* modify the Form based on the client control.
* @param who The new client control.
*/
//------------------------------------------------------------------
protected void startingInput(Control who){}
//-------------------------------------------------------------------
/**
* This should reset the Form for input. It is called by default by doInit() and
* by default does nothing.
**/
protected void doReset() {}
/**
* This is called after the call to popup(). By default it simply calls doReset().
**/
protected void doInit() {doReset();}
/**
* By default this does nothing.
**/
protected void doClear() {}
//-------------------------------------------------------------------
/**
* Calling this will set the client for the Form and then causes the form to be
* displayed via the popup() method. Before calling popup() it calls startingInput()
* and after popup() it calls doInit().
**/
//===================================================================
public void setFor(Control who)
//===================================================================
{
	client = who;
	startingInput(who);
	popup();
	doInit();
}
//==================================================================
public FormFrame makeFrame(int options)
//==================================================================
{
	FormFrame ff = super.makeFrame(options);
	ff.contentsOnly = true;
	ff.borderWidth = 0;
	ff.borderStyle = BDR_NOBORDER;
	ff.popupController = this;
	ff.wantPressedOutside = ff.capturePressedOutside = true;
	return ff;
}
/**
* This closes the form by exiting with exit code IDCANCEL.
**/
//===================================================================
public void closePopup(int why, int flags)
//===================================================================
{
	new Exception().printStackTrace();
	exit(IDCANCEL);
}
/**
* This does the work of positioning and displaying the Form.
**/
//-------------------------------------------------------------------
protected void popup()
//-------------------------------------------------------------------
{
	if (!putByClient)
		exec(client.getWindow().contents,null);
	else {
		int was = modify(Invisible,0);
		Frame f = exec(client.getWindow().contents,null,0);
		Dimension r = f.getPreferredSize(null);
		Window w = getWindow();
		Rect ma = Gui.visibleWindowClientArea(w);//client)
		if (ma == null) ma = w.getRect();
		Point p = Gui.getPosInParent(client,w);
		int y = p.y + client.getRect().height;
		int x = p.x;
		if (y+r.height > ma.height)
			if ((y = p.y-r.height) < 0)
				y = (ma.height-r.height)/2;
		if (x + r.width > ma.width)
			if ((x = ma.width-r.width) < 0)
				x = (ma.width-r.width)/2;
		if (x < 0) x = 0;
		if (y < 0) y = 0;
		Rect cr = checkSize(new Rect(x,y,r.width,r.height),r.width <= ma.width-2 && r.height <= ma.height-2);
		if (cr == null) f.setRect(x,y,r.width,r.height);
		else f.setRect(cr.x,cr.y,cr.width,cr.height);
		restore(was,Invisible);
		//ewe.sys.Vm.debug("Setting: "+f.getRect(null)+", "+client.getWindow().getRect(null));
		f.repaintNow();
	}
	Control.popupBeep();
}
/**
* If the Form gets an IKeys.ESCAPE key press it will close the popup with an exit code
* of IDCANCEL.<p>
* Note that to get a key press you will probably have to do: modifyAll(SendUpKeyEvents,true)
* on this Form so that child controls send up key events that they do not handle.
**/
//==================================================================
public void onKeyEvent(KeyEvent ev)
//==================================================================
{
	if (ev.type != ev.KEY_PRESS) return;
	if (ev.key == IKeys.ESCAPE) exit(IDCANCEL);
	else super.onKeyEvent(ev);
}
/**
* This method is called if the putByClient method is true. The intended Rect is set to
* be the location and size that the Form would prefer to be. The willFit parameter tells
* if the intended Rect will actuall fit in the parent Window (the window
* containing the client control). This gives the Form an opportunity
* to modify itself if it is determined that it cannot fit in the Window. The Form can then return
* a new (probably smaller) Rect that WILL fit in the parent Window, which will then be used
* to locate the Frame containing the Form.<p>
* Generally if willFit is true, you should simply return the intended Rect. By default if
* willFit is false, the Form is resized to fit into the window.
* @param intended The Rect specifying the preferred location and size of the Form.
* @param willFit true if the intended Rect fits in the Window, false if it does not.
* @return either the intended Rect or a new Rect.
*/
//-------------------------------------------------------------------
protected Rect checkSize(Rect intended,boolean willFit)
//-------------------------------------------------------------------
{
	if (willFit) return intended;
	Window win = getWindow();
	int w = win.width, h = win.height;
	if (intended.x+intended.width>w) w = w-intended.x;
	else w = intended.width;
	if (intended.y+intended.height>h) h = h-intended.y;
	else h = intended.height;
	return new Rect(intended.x,intended.y, w, h);
}
//-------------------------------------------------------------------
protected void addCloseControls(Panel dest)
//-------------------------------------------------------------------
{
	CellPanel cp = new CellPanel();
	cp.addLast(ok = new mButton(tick));
	ok.borderStyle = BDR_NOBORDER;
	cp.addLast(cancel = new mButton(cross));
	cancel.borderStyle = BDR_NOBORDER;
	dest.addNext(cp).setCell(DONTSTRETCH).setControl(VFILL);
}
//-------------------------------------------------------------------
protected void addCloseControls()
//-------------------------------------------------------------------
{
	addCloseControls(this);
}
//-------------------------------------------------------------------
protected Control addMainControls(Control main)
//-------------------------------------------------------------------
{
	addNext(main).setCell(HSTRETCH).setTag(INSETS,new Insets(2,2,2,2));
	return main;
}
//===================================================================
public void close(int value)
//===================================================================
{
	super.close(value);
	if (client != null){
		if (value == IDOK){
			transferToClient(client);
			client.notifyDataChange();
		}
		client.postEvent(new ControlEvent(ControlEvent.POPUP_CLOSED,client));
		client.deactivate();
	}
}
/**
 * This is called if the exit value of the Form is IDOK - it is used to indicate that data
 * should be transferred to the client control if necessary.
 * @param client the client control for the Popup form.
 */
//-------------------------------------------------------------------
protected void transferToClient(Control client)
//-------------------------------------------------------------------
{
}
//##################################################################
}
//##################################################################

