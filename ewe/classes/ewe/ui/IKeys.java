/*********************************************************************************
 *  Ewe Virtual Machine - Version 1.14, January 24, 2002                         *
 *  Copyright (C) 1999-2002 Michael L Brereton <michael_brereton@ewesoft.com>    *
 *  Copyright (C) 1998, 1999 Wabasoft <www.wabasoft.com>                         *
 *  All Rights Reserved                                                          *
 *                                                                               *
 *  This library and virtual machine is free software; you can redistribute      *
 *  it and/or modify it under the terms of the Amended GNU Lesser General        *
 *  Public License distributed with this software.                               *
 *                                                                               *
 *  Under this license, linking this library or part thereof with other files to *
 *  produce an executable does not in itself require the executable to be        *
 *  covered by the GNU Lesser General Public License.                            *
 *                                                                               *
 *  This library and virtual machine is distributed in the hope that it will     *
 *  be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of    *
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.                         *
 *                                                                               *
 *  You should have received a copy of the License along with this software;     *
 *  if not, please download it at: www.ewesoft.com/LGPL.txt                      *
 *                                                                               *
 *********************************************************************************/
package ewe.ui;

/**
 * IKeys is an interface containing values for special keys and modifiers.
 * <p>
 * Below is an example of IKeys being used.
 *
 * <pre>
 * public void onEvent(Event event)
 *  {
 *  if (event.type == KeyEvent.KEY_PRESS)
 *   {
 *   KeyEvent ke = (KeyEvent)event;
 *   if ((ke.modifiers & CONTROL) > 0)
 *      ... control key was held down
 *   if (ke.key == PAGE_DOWN)
 *      ... page down key pressed
 * </pre>
 */
public interface IKeys extends IFunctionKeys, IKeypadKeys
{
// NOTE: The WabaVM indexes directly to these values

/** modifier for alt key */
public static final int ALT      = (1 << 0);
/** modifier for control key */
public static final int CONTROL  = (1 << 1);
/** modifier for shift key */
public static final int SHIFT    = (1 << 2);
/** modifier for special keys */
public static final int SPECIAL = (1 << 3);
/** modifier used when specifying hot keys - indicates that the key alone with no modifier must be pressed. */
public static final int ONLY = (1 << 4);
/** modifier used when specifying hot keys - indicates that the key should not be underlined. */
public static final int INVISIBLE = (1 << 5);
/** For PRESSED KeyEvents, indicates that the key press is generated
because the key is being held down.*/
public static final int REPEATED = 0x100;
/** For PRESSED KeyEvents, indicates that the text element has a multi-character
string that should be considered as entered by the user.
**/
public static final int MULTICHARACTER = 0x200;
/** For PRESSED KeyEvents, indicates that the key that was typed should be considered
"conditional" - that is it may be superceded by another key.
**/
public static final int CONDITIONAL = 0x400;
/** For PRESSED KeyEvents, indicates that the key that was typed should be considered
to replace the previously sent key press. This <b>may</b> be used in combination with
CONDITIONAL to indicate that this replacement may also be conditional.
**/
public static final int REPLACEMENT = 0x800;
/** This indicates that the KeyEvent was generated by an InputMethod.
**/
public static final int FROM_INPUT_METHOD = 0x1000;

/** special key */
public static final int PAGE_UP   = 75000;
/** special key */
public static final int PAGE_DOWN = 75001;
/** special key */
public static final int HOME      = 75002;
/** special key */
public static final int END       = 75003;
/** special key */
public static final int UP        = 75004;
/** special key */
public static final int DOWN      = 75005;
/** special key */
public static final int LEFT      = 75006;
/** special key */
public static final int RIGHT     = 75007;
/** special key */
public static final int INSERT    = 75008;
/** special key */
public static final int ENTER     = 75009;
/** special key */
public static final int TAB       = 75010;
/** special key */
public static final int BACKSPACE = 75011;
/** special key */
public static final int ESCAPE    = 75012;
/** special key */
public static final int DELETE    = 75013;
/** special key */
public static final int MENU      = 75014;
/** special key */
public static final int COMMAND   = 75015;
/** special key */
public static final int HELP = 75016;
/** special key */
public static final int PDA_CANCEL = 75017;
/** special key */
public static final int NEXT_TAB = 75018;
/** special key */
public static final int PREV_TAB = 75019;
/** special key */
public static final int NEXT_CONTROL = 75020;
/** special key */
public static final int PREV_CONTROL = 75021;
/** special key */
public static final int SOFTKEY1 = 75022;
/** special key */
public static final int SOFTKEY2 = 75023;

/** Left Mouse Button or Pen **/
public static final int PEN = 76000;
/** Action Button. On my Casio it is 0x86 **/
public static final int ACTION = 76001;

/**
* This mask should be applied to the result of Vm.getAsyncKeyState(int keyCode).
* If it is set then the key is being pressed at the time the method was called.
* See also: KEY_WASPRESSED which is just as important to ensure you do not miss
* key presses.
**/
public static final int KEY_PRESSED = 0x8000;
/**
* This mask should be applied to the result of Vm.getAsyncKeyState(int keyCode).
* If it is set then the key was pressed at least once since the last call to getAsyncKeyState().
* If you are doing a long process and want to be interrupted by a keypress then do this:
*
* // First wait until the key is not being pressed.
* while((Vm.getAsyncKeyState(ExitKeyCode) & (IKeys.KEY_PRESSED|IKeys.KEY_WASPRESSED)) != 0) Vm.sleep(100);
* // Now enter your loop.
* while(workingHard){
*   doTheWork();
*   if ((Vm.getAsyncState(ExitKeyCode) & (IKeys.KEY_PRESSED|IKeys.KEY_WASPRESSED)) != 0) {
*     cancelled = true;
*     break;
* }
**/
public static final int KEY_WASPRESSED = 0x1;
}



